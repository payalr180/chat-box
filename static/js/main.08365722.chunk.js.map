{"version":3,"sources":["components/user1/user1.component.jsx","components/user2/user2.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["User1","props","textInput","React","createRef","id","type","placeholder","ref","onClick","sendMessage","current","value","document","getElementById","User2","App","receivedMessage1","message","setState","prevState","userData","receivedMessage2","state","className","this","map","chat","i","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0PAEaA,EAAQ,SAACC,GAClB,IAAIC,EAAYC,IAAMC,YAOtB,OACA,gCACI,uBAAOC,GAAG,aAAaC,KAAK,OAAOC,YAAY,oBACxCC,IAAKN,IAEZ,wBAAQI,KAAK,SAAUG,QAAS,WAC1BR,EAAMS,YAAYR,EAAUS,QAAQC,OAT1CC,SAASC,eAAe,cAAcF,MAAQ,IAQ9C,sBCbKG,EAAQ,SAACd,GAClB,IAAIC,EAAYC,IAAMC,YAOtB,OACA,gCACI,uBAAOC,GAAG,aAAaC,KAAK,OAAOC,YAAY,oBACxCC,IAAKN,IAEZ,wBAAQI,KAAK,SAAUG,QAAS,WAC1BR,EAAMS,YAAYR,EAAUS,QAAQC,OAT1CC,SAASC,eAAe,cAAcF,MAAQ,IAQ9C,sBC+BOI,E,kDAxCb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAMRgB,iBAAmB,SAACC,GAClB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA2B,WAAaH,SATjC,EAanBI,iBAAmB,SAACJ,GAClB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA2B,WAAaH,SAblD,EAAKK,MAAQ,CACXF,SAAU,IAHK,E,0CAmBnB,WAEA,OACE,sBAAKG,UAAU,MAAf,UACE,gEACA,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAOd,YAAgBe,KAAKR,mBAC5B,cAAC,EAAD,CAAOP,YAAgBe,KAAKH,sBAE9B,qBAAKE,UAAU,WAAf,SAEIC,KAAKF,MAAMF,SAASK,KAAI,SAACC,EAAMC,GAAP,OACxB,6BAAaD,GAAJC,e,GAhCDC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BgB,M","file":"static/js/main.08365722.chunk.js","sourcesContent":["import React from \"react\"\n\nexport const User1 = (props) => {\n    let textInput = React.createRef();\n\n    function clearInputField()\n    {\n        document.getElementById('textfield1').value = '';\n    }\n\n    return(\n    <div>\n        <input id=\"textfield1\" type=\"text\" placeholder=\"Type a message...\"\n               ref={textInput}\n        />\n        <button type=\"submit\"  onClick={() => {\n              props.sendMessage(textInput.current.value);\n              clearInputField();\n            }}>Send</button>\n    </div>\n)}","import React from \"react\"\n\nexport const User2 = (props) => {\n    let textInput = React.createRef();\n\n    function clearInputField()\n    {\n        document.getElementById('textfield2').value = '';\n    }\n\n    return(\n    <div>\n        <input id=\"textfield2\" type=\"text\" placeholder=\"Type a message...\"\n               ref={textInput}\n        />\n        <button type=\"submit\"  onClick={() => {\n              props.sendMessage(textInput.current.value);\n              clearInputField();\n            }}>Send</button>\n    </div>\n)}","import React, { Component } from 'react';\nimport './App.css';\nimport { User1 } from './components/user1/user1.component';\nimport { User2 } from './components/user2/user2.component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userData: []\n    }\n  }\n\n  receivedMessage1 = (message) => {\n    this.setState(prevState => ({\n      userData: [...prevState.userData, ('User1 : ' + message)]\n    }))\n  }\n\n  receivedMessage2 = (message) => {\n    this.setState(prevState => ({\n      userData: [...prevState.userData, ('User2 : ' + message)]\n    }))\n  }\n\n  render() {\n  \n  return (\n    <div className=\"App\">\n      <h1>Chat Box - Share your thoughts</h1>\n      <div className=\"user-list\">\n        <User1 sendMessage = { this.receivedMessage1 }/>\n        <User2 sendMessage = { this.receivedMessage2 }/>\n      </div>\n      <div className=\"chat-box\">\n        {\n          this.state.userData.map((chat, i) => \n          <h4 key={i}>{chat}</h4>\n        )\n        }\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}